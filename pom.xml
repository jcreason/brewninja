<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright Â© 2013 Jarett Creason
  ~
  ~ This file is part of BrewNinja.
  ~
  ~ BrewNinja is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ BrewNinja is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with BrewNinja in the file named COPYING in the root directory.
  ~ If not, see <http://www.gnu.org/licenses/>.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0"
				 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.europabrewing</groupId>
	<artifactId>brewninja</artifactId>
	<version>0.1.1</version>
	<name>BrewNinja</name>

	<organization>
		<name>Jarett Creason - Europa Brewing</name>
		<url>http://europabrewing.com</url>
	</organization>

	<repositories>
		<repository>
			<id>central</id>
			<name>Central Repository</name>
			<url>http://repo.maven.apache.org/maven2</url>
			<layout>default</layout>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>

		<!-- Raspberry Pi for Java project snapshots- http://pi4j.com
		<repository>
			<id>oss-snapshots-repo</id>
			<name>Sonatype OSS Maven Repository</name>
			<url>https://oss.sonatype.org/content/groups/public</url>
			<snapshots>
				<enabled>true</enabled>
				<updatePolicy>always</updatePolicy>
			</snapshots>
		</repository>
		 -->
	</repositories>

	<dependencies>

		<!-- Raspberry Pi for Java project - http://pi4j.com -->
		<dependency>
			<groupId>com.pi4j</groupId>
			<artifactId>pi4j-core</artifactId>
			<version>0.0.5</version>
		</dependency>

		<!-- Google's helpful set of helpers -->
		<dependency>
			<groupId>com.google.guava</groupId>
			<artifactId>guava</artifactId>
			<version>14.0.1</version>
		</dependency>

		<!-- MySQL JDBC driver -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.25</version>
		</dependency>

		<!-- Hibernate ORM -->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>4.2.2.Final</version>
		</dependency>

		<!-- Hibernate connection pooling -->
		<dependency>
			<groupId>c3p0</groupId>
			<artifactId>c3p0</artifactId>
			<version>0.9.1.2</version>
		</dependency>

		<!-- Database version-ing -->
		<dependency>
			<groupId>com.googlecode.flyway</groupId>
			<artifactId>flyway-maven-plugin</artifactId>
			<version>2.2</version>
		</dependency>

		<!-- Logging - Log4j2 -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.0-beta8</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>2.0-beta8</version>
		</dependency>

		<!-- Bind slf4j logs to log4j2 -->
		<!--<dependency>-->
			<!--<groupId>org.apache.logging.log4j</groupId>-->
			<!--<artifactId>log4j-slf4j-impl</artifactId>-->
			<!--<version>2.0-beta8</version>-->
		<!--</dependency>-->

		<!-- Bind apache logging to log4j2 -->
		<!--<dependency>-->
			<!--<groupId>org.apache.logging.log4j</groupId>-->
			<!--<artifactId>log4j-jcl</artifactId>-->
			<!--<version>2.0-beta8</version>-->
		<!--</dependency>-->

	</dependencies>

	<build>
		<directory>target</directory>
		<outputDirectory>target/classes</outputDirectory>
		<finalName>${project.artifactId}-${project.version}</finalName>
		<testOutputDirectory>target/test-classes</testOutputDirectory>
		<sourceDirectory>src/main/java</sourceDirectory>
		<testSourceDirectory>src/test/java</testSourceDirectory>

		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>

		<testResources>
			<testResource>
				<directory>src/test/resources</directory>
			</testResource>
		</testResources>

		<plugins>

			<!-- allow for the JavaFX stuff to work since Oracle screwed up the packaging a bit -->
			<!-- also allows for JAR file packaging of JavaFX code -->
			<!-- see http://zenjava.com/javafx/maven/ for more info -->
			<plugin>
				<groupId>com.zenjava</groupId>
				<artifactId>javafx-maven-plugin</artifactId>
				<version>2.0</version>
				<configuration>
					<mainClass>[put your application main class here]</mainClass>
				</configuration>
			</plugin>

			<!-- setup the maven compiler so it doesn't complain -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.4</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>

			<!-- So that we can execute the compiled Java classes with Maven (no hassle with classpath or JARs) -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<configuration>
					<mainClass>com.europabrewing.BrewNinja</mainClass>
					<!-- <arguments><argument></argument></arguments> -->
				</configuration>
			</plugin>

			<!-- Flyway Database evolution plugin -->
			<plugin>
				<groupId>com.googlecode.flyway</groupId>
				<artifactId>flyway-maven-plugin</artifactId>
				<version>2.2</version>
				<configuration>
					<driver>com.mysql.jdbc.Driver</driver>
					<url>jdbc:mysql://localhost/brewninja</url>
					<!-- put this in your maven settings.xml file
					<user></user><password></password>
					-->
					<serverId>brewninja-flyway-db</serverId>
					<initVersion>1</initVersion>
					<locations>
						<location>filesystem:src/main/resources/db/migration</location>
					</locations>
				</configuration>
			</plugin>

			<!-- Copy the custom config files on build. This allows every user to have
			     separate configs but the system only look in one place. -->
			<plugin>
				<artifactId>maven-antrun-plugin</artifactId>
				<executions>
					<execution>
						<id>config</id>
						<phase>compile</phase>
						<configuration>
							<tasks>
								<!-- copy over the config files before the build based on the defined properties variable -->
								<copy
										file="${basedir}/src/main/resources/hibernate.${properties}.cfg.xml"
										tofile="${basedir}/src/main/resources/hibernate.cfg.xml"/>

								<copy
										file="${basedir}/src/main/resources/log4j2.${properties}.xml"
										tofile="${basedir}/src/main/resources/log4j2.xml"/>
							</tasks>
						</configuration>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>

	</build>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

</project>
